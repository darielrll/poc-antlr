/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'antlr'
    id 'idea'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation(platform('org.junit:junit-bom:5.7.0'))

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    implementation 'com.google.guava:guava:29.0-jre'

    antlr "org.antlr:antlr4:4.9.2"
    compile "org.antlr:antlr4-runtime:4.9.2"
}

application {
    // Define the main class for the application.
    mainClass = 'poc.antlr.App'
}

generateGrammarSource {
    maxHeapSize = "128m"
    arguments += ['-package', 'me.tomassetti.examples.MarkupParser', '-visitor', '-no-listener']
}
compileJava.dependsOn generateGrammarSource

sourceSets {
    generated {
        java.srcDir 'generated-src/antlr/main/'
    }
}
compileJava.source sourceSets.generated.java, sourceSets.main.java

clean{
    delete "generated-src"
}

idea {
    module {
        sourceDirs += file("generated-src/antlr/main/")
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

